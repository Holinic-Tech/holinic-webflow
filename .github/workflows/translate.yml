name: Webflow Translation

on:
  workflow_dispatch:
    inputs:
      url_patterns:
        description: 'URL patterns to translate (one per line)'
        required: true
        type: string
      target_language:
        description: 'Target language code'
        required: true
        default: 'de'
        type: choice
        options:
          - de
          - fr
          - es
          - it
          - pt
          - nl
      action:
        description: 'Action to perform'
        required: true
        default: 'translate'
        type: choice
        options:
          - translate
          - update

jobs:
  translate:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm init -y
          npm install node-fetch@2
      
      - name: Trigger Cloudflare Worker
        env:
          CLOUDFLARE_WORKER_URL: ${{ secrets.CLOUDFLARE_WORKER_URL }}
          WORKER_AUTH_TOKEN: ${{ secrets.WORKER_AUTH_TOKEN }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          WEBFLOW_TOKEN: ${{ secrets.WEBFLOW_TOKEN }}
        run: |
          node -e "
          const fetch = require('node-fetch');
          
          async function triggerTranslation() {
            try {
              console.log('üöÄ Starting translation process...');
              
              const payload = {
                urlPatterns: \`${{ github.event.inputs.url_patterns }}\`.split('\n').filter(p => p.trim()),
                targetLanguage: '${{ github.event.inputs.target_language }}',
                action: '${{ github.event.inputs.action }}',
                webflowToken: process.env.WEBFLOW_TOKEN,
                openaiKey: process.env.OPENAI_API_KEY
              };
              
              console.log('Payload:', JSON.stringify(payload, null, 2));
              
              const response = await fetch(\`\${process.env.CLOUDFLARE_WORKER_URL}/translate\`, {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                  'Authorization': \`Bearer \${process.env.WORKER_AUTH_TOKEN}\`
                },
                body: JSON.stringify(payload)
              });
              
              const result = await response.json();
              
              if (response.ok) {
                console.log('‚úÖ Translation request successful');
                console.log('Results:', JSON.stringify(result, null, 2));
                
                // Summary output
                console.log('\\n=== TRANSLATION SUMMARY ===');
                console.log(\`‚úÖ Success: \${result.success.length} pages\`);
                console.log(\`‚ùå Failed: \${result.failed.length} pages\`);
                console.log(\`üí∞ Total Cost: $\${result.totalCost?.toFixed(4) || '0.0000'}\`);
                console.log(\`üìÖ Processed at: \${result.processedAt}\`);
                
                if (result.success.length > 0) {
                  console.log('\\n‚úÖ Successfully translated:');
                  result.success.forEach(page => {
                    console.log(\`  - \${page.slug} ‚Üí \${page.newSlug || page.slug}\`);
                  });
                }
                
                if (result.failed.length > 0) {
                  console.log('\\n‚ùå Failed translations:');
                  result.failed.forEach(page => {
                    console.log(\`  - \${page.slug}: \${page.error}\`);
                  });
                }
                
                console.log('\\nüìã Next Steps:');
                console.log('1. Check your Webflow dashboard for new pages');
                console.log('2. Review and publish the translated pages');
                console.log('3. Test the updated links (checkout/quiz)');
                
              } else {
                console.error('‚ùå Translation request failed');
                console.error('Error:', result);
                process.exit(1);
              }
            } catch (error) {
              console.error('‚ùå Error triggering translation:', error);
              process.exit(1);
            }
          }
          
          triggerTranslation();
          "